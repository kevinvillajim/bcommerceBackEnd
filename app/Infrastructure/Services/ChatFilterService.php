<?php

namespace App\Infrastructure\Services;

use App\Domain\Interfaces\ChatFilterInterface;
use App\Events\SellerAccountBlocked;
use App\Events\SellerStrikeAdded;
use App\Models\Seller;
use App\Models\User;
use App\Models\UserStrike;
use App\Services\ConfigurationService;

class ChatFilterService implements ChatFilterInterface
{
    private ConfigurationService $configService;

    public function __construct(ConfigurationService $configService)
    {
        $this->configService = $configService;
    }

    /**
     * Patrones para detectar emojis num√©ricos espec√≠ficos (0‚É£-9‚É£)
     */
    private $numberEmojiPatterns = [
        '/[0-9]\x{FE0F}?\x{20E3}/u', // N√∫meros con keycap emoji (0‚É£-9‚É£)
        '/\x{1F51F}/u', // üîü (ten emoji)
    ];

    /**
     * Palabras clave que indican contexto de CONTACTO (n√∫meros prohibidos)
     */
    private $contactContextWords = [
        // Contacto directo (PESO ALTO)
        'n√∫mero', 'numero', 'tel√©fono', 'telefono', 'celular', 'm√≥vil', 'movil',
        'contacto', 'contactar', 'contactame', 'cont√°ctame', 'llama', 'llamar', 'llamame', 'll√°mame',
        'whatsapp', 'whats', 'wsp', 'telegram', 'sms', 'mensaje', 'mensajea', 'mensajear',

        // Ubicaci√≥n y encuentros (PESO ALTO)
        'direcci√≥n', 'direccion', 'ubicaci√≥n', 'ubicacion', 'sector', 'calle', 'avenida', 'av',
        'casa', 'domicilio', 'residencia', 'barrio', 'ciudadela', 'conjunto',
        'encuentro', 'encuentre', 'reunir', 'reunamos', 'reunirse', 'vernos', 'verse',
        'quedar', 'quedamos', 'cita', 'coordinar', 'coordine', 'coordinemos',

        // M√©todos de pago externos (PESO MEDIO)
        'transferencia', 'deposito', 'dep√≥sito', 'banco', 'cuenta', 'efectivo',
        'paypal', 'western', 'moneygram', 'giro',

        // Comunicaci√≥n externa (PESO ALTO)
        'email', 'correo', 'gmail', 'yahoo', 'hotmail', 'facebook', 'instagram',
        'linkedin', 'twitter', 'tiktok', 'zoom', 'skype', 'teams', 'meet',

        // Evasi√≥n de plataforma (PESO ALTO)
        'aparte', 'fuera', 'afuera', 'externo', 'externamente', 'directo', 'directamente',
        'privado', 'privada', 'particular', 'personal', 'independiente',
    ];

    /**
     * Palabras clave que indican contexto de NEGOCIO (n√∫meros permitidos)
     */
    private $businessContextWords = [
        // Cantidades y stock (PESO ALTO)
        'tengo', 'tiene', 'hay', 'disponible', 'stock', 'cantidad', 'unidades', 'piezas',
        'art√≠culos', 'articulos', 'productos', 'items', 'ejemplares', 'copias', 'vendo',
        'vendiendo', 'ofrezco', 'incluye', 'contiene', 'trae', 'viene', 'pack',

        // Precios y dinero (PESO ALTO)
        'cuesta', 'vale', 'precio', 'valor', 'coste', 'costo', 'pagar', 'pago',
        'd√≥lares', 'dolares', 'usd', 'centavos', 'euros', 'soles', 'pesos',
        'descuento', 'oferta', 'promoci√≥n', 'promocion', 'rebaja', 'barato',
        'caro', 'economic', 'economico', 'ganga', 'oportunidad',

        // Tiempo y fechas (PESO ALTO)
        'd√≠as', 'dias', 'horas', 'minutos', 'semanas', 'meses', 'a√±o', 'a√±os',
        'demora', 'demoro', 'tarda', 'tarde', 'entrega', 'env√≠o', 'envio',
        'tiempo', 'plazo', 'fecha', 'cuando', 'listo', 'disponible', 'inmediato',
        'r√°pido', 'rapido', 'pronto', 'ma√±ana', 'hoy', 'ayer',

        // Medidas y especificaciones (PESO ALTO)
        'tama√±o', 'talla', 'medida', 'largo', 'ancho', 'alto', 'peso', 'gramos',
        'kilos', 'metros', 'cent√≠metros', 'pulgadas', 'litros', 'mililitros',
        'voltios', 'watts', 'rpm', 'velocidad', 'capacidad', 'memoria', 'gb', 'mb',
        'pulgadas', 'inches', 'cm', 'mm', 'kg', 'gr',

        // Porcentajes y estad√≠sticas (PESO MEDIO)
        'porciento', 'porcentaje', '%', 'por ciento', 'de', 'sobre', 'total',
        'promedio', 'm√°ximo', 'maximo', 'm√≠nimo', 'minimo', 'aproximadamente',
        'cerca', 'alrededor', 'entre', 'desde', 'hasta',

        // Garant√≠a y servicio (PESO MEDIO)
        'garant√≠a', 'garantia', 'servicio', 'reparaci√≥n', 'nuevo', 'usado',
        'mantenimiento', 'revisi√≥n', 'revision', 'cambio', 'repuesto', 'original',

        // Condici√≥n y estado (PESO MEDIO)
        'estado', 'condicion', 'condici√≥n', 'perfecto', 'excelente', 'bueno',
        'regular', 'funciona', 'funcionando', 'trabajando', 'operativo',

        // Compra/venta leg√≠tima (PESO ALTO)
        'comprar', 'compra', 'venta', 'vender', 'interesado', 'interesada',
        'necesito', 'busco', 'quiero', 'deseo', 'acepto', 'negociable',
    ];

    /**
     * Palabras de n√∫meros escritos que podr√≠an usarse para evadir filtros
     */
    private $writtenNumbers = [
        'cero', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho', 'nueve',
        'diez', 'once', 'doce', 'trece', 'catorce', 'quince', 'diecis√©is', 'diecisiete',
        'dieciocho', 'diecinueve', 'veinte', 'treinta', 'cuarenta', 'cincuenta',
        'sesenta', 'setenta', 'ochenta', 'noventa', 'cien', 'mil',
    ];

    /**
     * Verifica si el mensaje contiene contenido prohibido y registra strikes si es necesario
     */
    public function containsProhibitedContent(string $message, ?int $userId = null, ?int $nStrikes = null): bool
    {
        $message = $this->normalizeMessage($message);

        // Get strikes threshold from database configuration
        if ($nStrikes === null) {
            $nStrikes = $this->configService->getConfig('moderation.userStrikesThreshold', 3);
        }

        // Verificar emojis num√©ricos primero (siempre prohibidos)
        if ($this->hasProhibitedNumberEmojis($message)) {
            if ($userId !== null) {
                $this->registerStrike($userId, $nStrikes, 'Uso de emojis num√©ricos prohibidos');
            }

            return true;
        }

        // Verificar solicitudes de contacto sin n√∫meros (NUEVO)
        if ($this->hasContactRequestPatterns($message)) {
            if ($userId !== null) {
                $this->registerStrike($userId, $nStrikes, 'Solicitud de informaci√≥n de contacto');
            }

            return true;
        }

        // Verificar n√∫meros escritos en contexto de contacto
        if ($this->hasWrittenNumbersInContactContext($message)) {
            if ($userId !== null) {
                $this->registerStrike($userId, $nStrikes, 'N√∫meros escritos en contexto de contacto');
            }

            return true;
        }

        // Verificar patrones de tel√©fono
        if ($this->hasPhoneNumberInContactContext($message)) {
            if ($userId !== null) {
                $this->registerStrike($userId, $nStrikes, 'N√∫mero de tel√©fono detectado');
            }

            return true;
        }

        return false;
    }

    /**
     * Normaliza el mensaje para mejor an√°lisis
     */
    private function normalizeMessage(string $message): string
    {
        // Convertir a min√∫sculas para an√°lisis de contexto
        $normalized = mb_strtolower($message, 'UTF-8');

        // Remover acentos para mejor detecci√≥n de palabras
        $normalized = $this->removeAccents($normalized);

        return $normalized;
    }

    /**
     * Remueve acentos para mejor an√°lisis de texto
     */
    private function removeAccents(string $text): string
    {
        $accents = [
            '√°' => 'a', '√©' => 'e', '√≠' => 'i', '√≥' => 'o', '√∫' => 'u',
            '√±' => 'n', '√º' => 'u', '√ß' => 'c',
        ];

        return strtr($text, $accents);
    }

    /**
     * Verifica si hay emojis num√©ricos prohibidos
     */
    private function hasProhibitedNumberEmojis(string $message): bool
    {
        foreach ($this->numberEmojiPatterns as $pattern) {
            if (preg_match($pattern, $message)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Verifica si hay solicitudes de informaci√≥n de contacto (sin n√∫meros)
     */
    private function hasContactRequestPatterns(string $message): bool
    {
        // Patrones espec√≠ficos de solicitud de contacto
        $contactRequestPatterns = [
            // Solicitudes directas de redes sociales
            '/(?:mandame|pasame|dame|enviame|comparteme)\s+(?:tu\s+)?(?:facebook|whatsapp|whats|instagram|telegram|email|correo|gmail)/',
            '/(?:mi\s+)?(?:facebook|whatsapp|whats|instagram|telegram)\s+es\s/',
            '/(?:agregame|a√±ademe|busqueme|contactame)\s+(?:en\s+)?(?:facebook|whatsapp|whats|instagram|telegram)/',

            // Solicitudes de encuentro/ubicaci√≥n
            '/(?:me\s+encuentro|estoy|vivo|trabajo)\s+en\s+(?:la\s+)?(?:av|avenida|calle|sector|barrio)/',
            '/(?:nos\s+vemos|encontramos|encontremonos|quedar|vernos)\s+en\s+/',
            '/(?:mi\s+)?(?:direccion|ubicacion)\s+es\s+/',
            '/(?:vivo|resido|trabajo)\s+(?:en\s+)?(?:el\s+)?(?:sector|barrio|zona)\s+/',

            // Evasiones de plataforma
            '/(?:conversemos|hablemos|escribeme|contactame)\s+(?:por\s+)?(?:fuera|aparte|afuera|externo)/',
            '/(?:comunicate|escribeme|contactame)\s+(?:por\s+)?(?:privado|directo)/',
            '/(?:salir|comunicarnos|hablar)\s+(?:de\s+)?(?:aqui|la\s+plataforma)/',

            // Intercambio directo de datos de contacto
            '/(?:te\s+paso|aqui\s+mi|este\s+es\s+mi)\s+(?:facebook|whatsapp|email|correo)/',
        ];

        foreach ($contactRequestPatterns as $pattern) {
            if (preg_match($pattern, $message)) {
                return true;
            }
        }

        // Verificar combinaciones sospechosas de palabras clave
        $suspiciousCombos = [
            ['mandame', 'facebook'], ['mandame', 'whatsapp'], ['mandame', 'instagram'],
            ['pasame', 'facebook'], ['pasame', 'whatsapp'], ['pasame', 'correo'],
            ['conversemos', 'whatsapp'], ['conversemos', 'facebook'], ['conversemos', 'telegram'],
            ['escribeme', 'privado'], ['contactame', 'directo'], ['hablemos', 'fuera'],
            ['encuentro', 'avenida'], ['encuentro', 'sector'], ['ubicacion', 'direccion'],
            ['vemos', 'calle'], ['quedar', 'sector'],
        ];

        foreach ($suspiciousCombos as $combo) {
            $allFound = true;
            foreach ($combo as $word) {
                if (stripos($message, $word) === false) {
                    $allFound = false;
                    break;
                }
            }
            if ($allFound) {
                return true;
            }
        }

        return false;
    }

    /**
     * Verifica si hay n√∫meros escritos en contexto de contacto
     */
    private function hasWrittenNumbersInContactContext(string $message): bool
    {
        // Buscar secuencias de n√∫meros escritos que podr√≠an formar un tel√©fono
        $numberPattern = '\b('.implode('|', $this->writtenNumbers).')\b';

        if (preg_match_all('/'.$numberPattern.'/i', $message, $matches)) {
            $foundNumbers = $matches[0];

            $consecutiveLimit = $this->configService->getConfig('moderation.consecutiveNumbersLimit', 7);
            $contextLimit = $this->configService->getConfig('moderation.numbersWithContextLimit', 3);

            // Si hay n√∫meros escritos consecutivos por encima del l√≠mite, es sospechoso
            if (count($foundNumbers) >= $consecutiveLimit) {
                return $this->isInContactContext($message);
            }

            // Si hay n√∫meros escritos junto con palabras de contacto
            if (count($foundNumbers) >= $contextLimit && $this->isInContactContext($message)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Verifica si hay n√∫meros telef√≥nicos en contexto de contacto
     */
    private function hasPhoneNumberInContactContext(string $message): bool
    {
        // PATRONES INEQU√çVOCOS - Bloquear autom√°ticamente sin verificar contexto
        $definitePhonePatterns = [
            // Formato internacional Ecuador: +593 9X XXX XXXX
            '/(?<!\w)(\+593[\s.-]?[96-9]\d[\s.-]?\d{3}[\s.-]?\d{4})(?!\w)/',
            // Formato local Ecuador: 09X XXX XXXX (el m√°s com√∫n)
            '/(?<!\w)(0[96-9]\d[\s.-]?\d{3}[\s.-]?\d{4})(?!\w)/',
            // Tel√©fonos fijos Ecuador: 0[2-7]XXXXXXX (8 d√≠gitos total)
            '/(?<!\w)(0[2-7]\d{7})(?!\w)/',
        ];

        // Verificar patrones inequ√≠vocos - bloquear autom√°ticamente
        foreach ($definitePhonePatterns as $pattern) {
            if (preg_match($pattern, $message)) {
                return true; // Bloquear autom√°ticamente, no necesita contexto
            }
        }

        // PATRONES AMBIGUOS - Verificar contexto antes de bloquear

        // Otros formatos internacionales (requieren contexto)
        if (preg_match('/(?<!\w)(\+\d{1,3}[\s.-]?[96-9]\d{2}[\s.-]?\d{3}[\s.-]?\d{3,4})(?!\w)/', $message)) {
            return $this->isInContactContext($message);
        }

        // N√∫meros largos ambiguos (8-12 d√≠gitos) - solo bloquear con contexto fuerte
        if (preg_match('/\b\d{8,12}\b/', $message)) {
            return $this->isInContactContext($message) && ! $this->hasStrongBusinessIndicators($message);
        }

        // Secuencias de n√∫meros con formato telef√≥nico
        if (preg_match('/\b\d{2,4}[\s.-]\d{3,4}[\s.-]\d{3,4}\b/', $message)) {
            return $this->isInContactContext($message);
        }

        return false;
    }

    /**
     * Determina si el mensaje est√° en contexto de contacto o negocio
     */
    private function isInContactContext(string $message): bool
    {
        $contactScore = 0;
        $businessScore = 0;

        // Contar palabras de contexto de contacto con pesos din√°micos
        foreach ($this->contactContextWords as $word) {
            if (stripos($message, $word) !== false) {
                $contactScore += $this->getContactWordWeight($word);
            }
        }

        // Contar palabras de contexto de negocio con pesos din√°micos
        foreach ($this->businessContextWords as $word) {
            if (stripos($message, $word) !== false) {
                $businessScore += $this->getBusinessWordWeight($word);
            }
        }

        // Verificar patrones sospechosos adicionales
        if ($this->hasSuspiciousPatterns($message)) {
            $contactScore += $this->configService->getConfig('moderation.contactScorePenalty', 3);
        }

        // Verificar si hay indicadores claros de negocio
        if ($this->hasStrongBusinessIndicators($message)) {
            $businessScore += $this->configService->getConfig('moderation.businessScoreBonus', 15);
        }

        // Verificar si hay indicadores claros de contacto
        if ($this->hasStrongContactIndicators($message)) {
            $contactScore += $this->configService->getConfig('moderation.contactPenaltyHeavy', 20);
        }

        // L√≥gica mejorada: necesita una diferencia significativa Y un m√≠nimo de score
        $scoreDifference = $contactScore - $businessScore;
        $minimumContactScore = $this->configService->getConfig('moderation.minimumContactScore', 8);
        $scoreDifferenceThreshold = $this->configService->getConfig('moderation.scoreDifferenceThreshold', 5);

        return $contactScore >= $minimumContactScore && $scoreDifference >= $scoreDifferenceThreshold;
    }

    /**
     * Obtiene el peso de una palabra de contacto seg√∫n su importancia
     */
    private function getContactWordWeight(string $word): int
    {
        // Palabras de contacto directo (peso muy alto)
        $veryHighWeight = ['telefono', 'celular', 'whatsapp', 'contacto', 'llamar', 'numero'];
        // Palabras de encuentro/ubicaci√≥n (peso alto)
        $highWeight = ['direccion', 'encuentro', 'calle', 'casa', 'vernos', 'coordinar'];
        // Palabras de comunicaci√≥n externa (peso alto)
        $externalComm = ['gmail', 'facebook', 'instagram', 'email', 'zoom', 'skype'];
        // Palabras de evasi√≥n (peso muy alto)
        $evasionWords = ['aparte', 'fuera', 'externo', 'directo', 'privado'];

        if (in_array($word, $veryHighWeight) || in_array($word, $evasionWords)) {
            return 8;
        } elseif (in_array($word, $highWeight) || in_array($word, $externalComm)) {
            return 5;
        } else {
            return 2;
        }
    }

    /**
     * Obtiene el peso de una palabra de negocio seg√∫n su importancia
     */
    private function getBusinessWordWeight(string $word): int
    {
        // Palabras de negocio fuerte (peso muy alto)
        $veryHighWeight = ['precio', 'cuesta', 'vale', 'vendo', 'comprar', 'productos', 'stock'];
        // Palabras de especificaciones (peso alto)
        $specWords = ['tama√±o', 'peso', 'medida', 'capacidad', 'memoria', 'voltios'];
        // Palabras de tiempo/entrega (peso alto)
        $timeWords = ['dias', 'horas', 'demora', 'entrega', 'inmediato', 'rapido'];
        // Palabras de cantidad (peso alto)
        $quantityWords = ['tengo', 'cantidad', 'unidades', 'piezas', 'disponible'];

        if (in_array($word, $veryHighWeight)) {
            return 6;
        } elseif (in_array($word, $specWords) || in_array($word, $timeWords) || in_array($word, $quantityWords)) {
            return 4;
        } else {
            return 2;
        }
    }

    /**
     * Verifica patrones sospechosos adicionales
     */
    private function hasSuspiciousPatterns(string $message): bool
    {
        // N√∫meros precedidos por '+' o '00' (muy sospechoso)
        if (preg_match('/(?:\+|00)\d{8,}/', $message)) {
            return true;
        }

        // Frases t√≠picas de evasi√≥n
        $evasionPhrases = [
            'te paso mi', 'aqui mi', 'este es mi', 'mi numero es',
            'comunicate', 'escribeme', 'busqueme', 'contactame',
        ];

        foreach ($evasionPhrases as $phrase) {
            if (stripos($message, $phrase) !== false) {
                return true;
            }
        }

        return false;
    }

    /**
     * Verifica si hay indicadores fuertes de contexto de negocio
     */
    private function hasStrongBusinessIndicators(string $message): bool
    {
        // Patrones que claramente indican transacci√≥n leg√≠tima
        $strongBusinessPatterns = [
            '/tiene(?:s)?\s+\d+\s+(?:productos|articulos|unidades|piezas)/',
            '/cuesta\s+\d+\s*(?:dolares|usd|pesos)/',
            '/precio\s+(?:es\s+)?\d+/',
            '/(?:demora|tarda)\s+\d+\s+(?:dias|horas|semanas)/',
            '/(?:pesa|mide)\s+\d+\s*(?:kg|gr|cm|metros)/',
            '/oferta\s+\d+(?:%|\s+por\s+ciento)/',
            '/memoria\s+\d+\s*(?:gb|mb)/',
            '/capacidad\s+\d+\s*(?:litros|ml)/',
        ];

        foreach ($strongBusinessPatterns as $pattern) {
            if (preg_match($pattern, $message)) {
                return true;
            }
        }

        // Combinaciones de palabras que indican negocio
        $businessCombos = [
            ['vendo', 'productos'], ['precio', 'negociable'],
            ['stock', 'disponible'], ['entrega', 'inmediata'],
            ['oferta', 'especial'], ['descuento', 'por'],
        ];

        foreach ($businessCombos as $combo) {
            $allFound = true;
            foreach ($combo as $word) {
                if (stripos($message, $word) === false) {
                    $allFound = false;
                    break;
                }
            }
            if ($allFound) {
                return true;
            }
        }

        return false;
    }

    /**
     * Verifica si hay indicadores fuertes de contexto de contacto
     */
    private function hasStrongContactIndicators(string $message): bool
    {
        // Patrones que claramente indican intercambio de contacto
        $strongContactPatterns = [
            '/(?:mi\s+)?(?:numero|telefono|celular)\s+(?:es\s+)?\d+/',
            '/llamame\s+al\s+\d+/',
            '/escribeme\s+al\s+\d+/',
            '/contactame\s+(?:al\s+)?\d+/',
            '/whatsapp\s+\d+/',
            '/(?:mi\s+)?direccion\s+es/',
            '/nos\s+vemos\s+en/',
            '/te\s+paso\s+mi\s+(?:numero|telefono)/',
        ];

        foreach ($strongContactPatterns as $pattern) {
            if (preg_match($pattern, $message)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Registra un strike para un usuario por enviar contenido prohibido
     */
    private function registerStrike(int $userId, int $nStrikes, string $reason): void
    {
        // Verificar si el usuario es un vendedor
        $isSeller = Seller::where('user_id', $userId)->exists();

        if (! $isSeller) {
            // Si no es vendedor, simplemente registramos el strike pero no se bloquea
            UserStrike::create([
                'user_id' => $userId,
                'reason' => $reason,
            ]);

            return;
        }

        // Si es vendedor, registramos el strike
        $strike = UserStrike::create([
            'user_id' => $userId,
            'reason' => $reason,
        ]);

        // Disparar evento de strike a√±adido
        event(new SellerStrikeAdded($strike->id, $userId));

        // Comprobar si ha acumulado el m√°ximo de strikes
        $this->checkAndBlockSeller($userId, $nStrikes);
    }

    /**
     * Verificar si un usuario ha superado el l√≠mite de strikes y bloquearlo si es necesario
     */
    private function checkAndBlockSeller(int $userId, int $limit): void
    {
        $strikeCount = UserStrike::where('user_id', $userId)->count();

        if ($strikeCount >= $limit) {
            $user = User::find($userId);
            if ($user) {
                // Bloquear al usuario
                $user->is_blocked = true;
                $user->save();

                // Actualizar el estado del vendedor
                $seller = Seller::where('user_id', $userId)->first();
                if ($seller) {
                    $seller->status = 'inactive';
                    $seller->save();
                }

                // Disparar evento de cuenta bloqueada
                event(new SellerAccountBlocked(
                    $userId,
                    "Cuenta bloqueada por acumular {$strikeCount} strikes"
                ));
            }
        }
    }

    /**
     * Obtiene la raz√≥n de rechazo para un mensaje
     */
    public function getRejectReason(string $message): ?string
    {
        $normalized = $this->normalizeMessage($message);

        if ($this->hasProhibitedNumberEmojis($message)) {
            return 'El mensaje contiene emojis num√©ricos, los cuales est√°n prohibidos para evitar el intercambio de informaci√≥n de contacto.';
        }

        if ($this->hasContactRequestPatterns($normalized)) {
            return 'El mensaje contiene solicitudes de informaci√≥n de contacto, lo cual no est√° permitido.';
        }

        if ($this->hasStrongContactIndicators($normalized)) {
            return 'El mensaje contiene patrones claros de intercambio de informaci√≥n de contacto, lo cual no est√° permitido.';
        }

        if ($this->hasWrittenNumbersInContactContext($normalized)) {
            return 'El mensaje contiene n√∫meros escritos en un contexto que sugiere intercambio de informaci√≥n de contacto.';
        }

        if ($this->hasPhoneNumberInContactContext($normalized)) {
            return 'El mensaje contiene informaci√≥n que parece ser un n√∫mero de contacto en un contexto inapropiado.';
        }

        return null;
    }

    /**
     * Censura el contenido prohibido en un mensaje
     */
    public function censorProhibitedContent(string $message): string
    {
        $censored = $message;
        $normalized = $this->normalizeMessage($message);

        // Censurar emojis num√©ricos (siempre)
        foreach ($this->numberEmojiPatterns as $pattern) {
            $censored = preg_replace($pattern, '‚ö†Ô∏è', $censored);
        }

        // Censurar patrones inequ√≠vocos de tel√©fono (siempre)
        $definitePhonePatterns = [
            '/(?<!\w)(\+593[\s.-]?[96-9]\d[\s.-]?\d{3}[\s.-]?\d{4})(?!\w)/',
            '/(?<!\w)(0[96-9]\d[\s.-]?\d{3}[\s.-]?\d{4})(?!\w)/',
            '/(?<!\w)(0[2-7]\d{7})(?!\w)/',
        ];

        foreach ($definitePhonePatterns as $pattern) {
            $censored = preg_replace($pattern, '[N√öMERO CENSURADO]', $censored);
        }

        // Censurar otros n√∫meros solo si est√°n en contexto de contacto
        if ($this->isInContactContext($normalized)) {
            // Censurar otros formatos internacionales
            $censored = preg_replace('/(?<!\w)(\+\d{1,3}[\s.-]?[96-9]\d{2}[\s.-]?\d{3}[\s.-]?\d{3,4})(?!\w)/', '[N√öMERO CENSURADO]', $censored);

            // Censurar secuencias largas de n√∫meros solo si no hay indicadores de negocio
            if (! $this->hasStrongBusinessIndicators($normalized)) {
                $censored = preg_replace('/\b\d{8,}\b/', '[N√öMERO CENSURADO]', $censored);

                // Censurar n√∫meros con formato telef√≥nico
                $censored = preg_replace('/\b\d{2,4}[\s.-]\d{3,4}[\s.-]\d{3,4}\b/', '[N√öMERO CENSURADO]', $censored);
            }
        }

        return $censored;
    }
}
